---
title:      Finding Max And Min Values with Versioned Documents
created_at: 2010-05-24 20:16:24.036546 -05:00
recipe: true
author: Amos King
description: How to use MapReduce to find max/min values for a given set and property
filter:
  - erb
  - markdown
---

### Problem

You want to list the latest version numbers of a set of documents.  Each document contains
a field that represents the version of the document and a field representing which document
that is a version of:

<% code 'javascript' do %>
{
    "document_id" : "mongoDB How-To",
    "author" : "Amos King",
    "content" : "...",
    "version" : 1.0
}
<% end %>

We want to end up with a collection of document_ids and their largest version number:

<% code 'javascript' do %>
{"_id" : "mongoDB How To", "value" : 1.1}
{"_id" : "Resume", "value" : 6}
{"_id" : "Schema", "value" : 1}
<% end %>

### Solution

Use the `mapreduce` database command.  Emit each document_id and version in the map function,
then use the reduce function to find the max version.

#### 1. Map

The map function is very simple.  We use our common element between all versions as the key and the version as the value:

<% code 'javascript' do %>
map = function () {
    emit(this.document_id, this.version);
}
<% end %>

#### 2. Reduce

The reduce function is also very simple but has a little bit of javascript magic.
Math.max normally takes in any number of arguments(ie. Math.max(1,2,3) ), but we
need to call it with an array. So we call Math.max with apply so that we can pass
in an array of values to max.  The apply breaks the array into individual arguments
to pass to Math.max.  The first argument to apply is the context in which we want to
run; Math will do fine here.

<% code 'javascript' do %>
reduce = function (key, values) {
    return Math.max.apply(Math, values);
}
<% end %>

Finding the minimum value is as easy as replacing Math.max with Math.min.

#### 3. Call the `mapreduce` command

Now it's time to get our result set. We'll set the output collection name parameter to 'newest_versions' so that we'll have an appropriately named set to work with:

<% code 'javascript' do %>
> result = db.runCommand({
... "mapreduce" : "documents",
... "map" : map,
... "reduce" : reduce,
... "out" : "newest_versions"})
<% end %>

Now, we query the 'newest_versions' collection. Each document is exactly what we're looking for:

<% code 'javascript' do %>
> db.newest_versions.find()
{"_id" : "mongoDB How To", "value" : 1.1}
{"_id" : "Resume", "value" : 6}
{"_id" : "Schema", "value" : 1}
<% end %>

### Extras

Grabbing the actual documents is just as easy.  We only need a finalize function:

<% code 'javascript' do %>
fin = function(key, value) {
  return db.oplan.findOne({id:key, version:value});
}
<% end %>

Then we call our mapReduce again with a finalize option set to that function
(Called using the mapReduce function just to show another way to use mapreduce):

<% code 'javascript' do %>
db.documents.mapReduce(map,reduce, {out:'newest_versions', finalize:fin});
<% end %>

### See Also

* The MongoDB [docs on mapreduce][1]

  [1]: http://www.mongodb.org/display/DOCS/MapReduce
