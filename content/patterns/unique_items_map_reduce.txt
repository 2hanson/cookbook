---
title:      Counting Unique Items with Map-Reduce
created_at: 2010-05-05 10:05:24.036546 -04:00
recipe: true
author: Kyle Banker
description: How to use map-reduce to count unique items across a category.
filter:
  - erb
  - markdown
---

### Problem

You have a collection that stores pageviews by user, and you want to count the total
number of unique user visits per day using map-reduce.

Each pageview document looks something like this:

<% code 'javascript' do %>
{
    "url" : "http://example.com/photos",
    "user_id" : ObjectID('4be1c916e031933119d78b30'),
    "date": "Wed May 05 2010 15:37:58 GMT-0400 (EDT)"
}
<% end %>

The solution requires grouping the pageviews by day and then counting
the total number of user visits and along with the number of unique visits for that day.

### Solution

The only tricky part about the map function is making sure that we emit on the day. Since we're storing
a full date, we need to parse out just the year, month, and date, and then emit on that value:

#### 1. Map

<% code 'javascript' do %>
map = function() {
  day = Date.UTC(this.date.getFullYear(), this.date.getMonth(), this.date.getDate());

  emit(day, {user_ids: [this.user_id]};
}
<% end %>

If you want a more efficient date calculation:

<% code 'javascript' do %>
  day = (24 * 60 * 60) % this.date;
<% end %>

#### 2. Reduce

The reduce function is quite simple: it adds user ids to an array. You may wonder why the object we emit in the
map function consists of an array with just one user id. The reason for this is that the number of times that reduce
is called is indeterminate, and therefore, the values emitted must be re-reducible.

What does this mean in practice? Simply that the object you emit must have the same structure as the object returned
by the reduce function.

<% code 'javascript' do %>
reduce = function(key, values) {
  var ids = [];

  values.forEach(function(v) {
   for(i in v.user_ids) {
     ids.push(v.user_ids[i]);
   }
  });

  return {user_ids: ids};
}
<% end %>

#### 3. Finalize

We could run map-reduce now, but the result would simply contain an array of user ids, duplicates included, for each day
represented in the collection. Fortunately, we can calculate totals and uniques using a finalizer function:

<% code 'javascript' do %>
finalize = function(key, val) {
  result       = {};
  unique_ids   = {};
  total_unique = 0;

  val.user_ids.forEach(function(id) {
    if(!unique_ids[id]) {
      unique += 1;
      unique_ids[id] = 1;
    }
  });

  // Store the unique total and overall total in the _result_ object.
  result.total = val.user_ids.length;
  result.total_unique = unique;

  return result;
}
<% end %>

The finalizer is executed for each record in the map-reduce result collection; in this case, this means once per date.
This finalizer counts the number of unique user ids and the total number of ids and then places those values in
a new document, result, which the function returnes.

Now that we have a finalizer, our map-reduce results collection will contain only totals.

#### 4. Calling the `mapreduce` command

Once we've defined these functions, we run the shell's mapReduce command:

<% code 'javascript' do %>
db.pageviews.mapReduce(map, reduce, {finalize: finalizer, out: pageview_results});
<% end %>

Since we've specified that the output collection should be called *pageview_results*, we can
query that collection to see the results:

<% code 'javascript' do %>
db.pageview_results.find();
<% end %>

#### 5. Limiting the Operation

If our pageviews collection spans a long period of time, it might be prudent to run map-reduce over
just a portion of the data. That can be achieved by passing a query selector to the map-reduce command. So,
for instance, if we just wanted results from the past two weeks, we could run:

<% code 'javascript' do %>
two_weeks_ago = new Date(Date.now() - 60 * 60 * 24 * 14 * 1000);
db.pageviews.mapReduce(map, reduce,
  {finalize: finalizer, out: pageview_results, query: {date: {'$gt': two_weeks_ago}}});
<% end %>

### See Also

* The MongoDB [docs on aggregation][1]
* [Map-Reduce Basics][2] by Kyle Banker
* [MapReduce: the Fanfiction][3] by Kristina Chodorow

  [1]: http://www.mongodb.org/display/DOCS/Aggregation
  [2]: http://kylebanker.com/blog/2009/12/mongodb-map-reduce-basics/
  [3]: http://www.snailinaturtleneck.com/blog/2010/03/15/mapreduce-the-fanfiction/

